scale_color_gradient(low='gray', high = 'red') +
theme_bw()
b |> filter(cluster == 'X1') |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='gray', high = 'red') +
theme_bw()
b |> filter(cluster == 'X1') |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='gray', high = 'red') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20))
b |> filter(cluster == 'X1') |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='gray', high = 'red') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F))
b |> filter(cluster == 'X1') |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='red', high = 'gray') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F))
b |> filter(cluster == 'X2') |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='red', high = 'gray') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F))
b |> filter(cluster == 'X3') |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='red', high = 'gray') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F))
b |> filter(cluster == 'X4') |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='red', high = 'gray') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F))
get_ToppCats()
data <- toppFun(markers=top_markers,
topp_categories= c("GeneOntologyMolecularFunction",
"GeneOntologyBiologicalProcess"))
#library(toppHat)
load_all()
data <- ToppFun(markers=top_markers,
topp_categories= c("GeneOntologyMolecularFunction",
"GeneOntologyBiologicalProcess"))
View(data)
data |> filter(cluster == 'X4') |>
filter(category == 'GeneOntologyBiologicalProcess') |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='red', high = 'gray') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F))
data |> filter(cluster == 'X4') |>
filter(Category == 'GeneOntologyBiologicalProcess') |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='red', high = 'gray') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F))
data |> filter(cluster == 'X0') |>
filter(Category == 'GeneOntologyBiologicalProcess') |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='red', high = 'gray') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F))
data |> filter(cluster == 'X0') |>
filter(Category == 'GeneOntologyBiologicalProcess') |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='red', high = 'gray') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F)) +
labs(color="P Value", size = "Genes from Query in Gene Set")
toppPlot <- function (toppData, category = NULL, clusters = NULL) {
#check toppData object - check for columns?
#parse category
if (is.null(category)){
if (length(unique(toppData$Category)) > 1) {
stop("Please select a ToppFun category to plot (e.g. category = 'GeneOntologyMolecularFunction').")
}
else if (length(unique(toppData$Category)) == 1) {
category = unique(toppData$Category)
}
else {
stop("Invalid input data - please check your toppData dataframe")
}
}
#parse clusters
if (length(clusters) > 1) {
plot_list = list()
for (c in clusters) {
plot_list[[c]] <- toppData |>
filter(cluster == c) |>
filter(Category == category) |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='red', high = 'gray') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F)) +
labs(color="P Value", size = "Genes from Query in Gene Set")
}
return (plot_list)
} else {
toppData |>
filter(cluster == clusters) |>
filter(Category == category) |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='red', high = 'gray') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F)) +
labs(color="P Value", size = "Genes from Query in Gene Set")
}
}
toppPlot(data, category = "GeneOntologyMolecularFunction", clusters = "X0")
toppPlot(data, category = "GeneOntologyMolecularFunction", clusters = "X9")
#library(toppHat)
load_all()
toppPlot <- function (toppData, category = NULL, clusters = NULL) {
#check toppData object - check for columns?
#parse category
if (is.null(category)){
if (length(unique(toppData$Category)) > 1) {
stop("Please select a ToppFun category to plot (e.g. category = 'GeneOntologyMolecularFunction').")
}
else if (length(unique(toppData$Category)) == 1) {
category = unique(toppData$Category)
}
else {
stop("Invalid input data - please check your toppData dataframe")
}
}
#parse clusters
if (length(clusters) > 1) {
plot_list = list()
for (c in clusters) {
plot_list[[c]] <- toppData |>
filter(cluster == c) |>
filter(Category == category) |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='red', high = 'gray') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F)) +
labs(color="P Value", size = "Genes from Query in Gene Set")
}
return (plot_list)
} else {
toppData |>
filter(cluster == clusters) |>
filter(Category == category) |>
mutate(geneRatio = GenesInTermInQuery / GenesInTerm) |>
mutate(Name = forcats::fct_reorder(Name, geneRatio)) |>
ggplot(mapping = aes(
x = geneRatio,
y = Name
)) +
geom_point(mapping = aes(size=GenesInTermInQuery, color=PValue)) +
geom_segment(aes(xend=0, yend=Name)) +
scale_color_gradient(low='red', high = 'gray') +
theme_bw() +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20, whitespace_only = F)) +
labs(color="P Value", size = "Genes from Query in Gene Set")
}
}
toppPlot(data, category = "GeneOntologyMolecularFunction", clusters = "X9")
data <- ToppFun(markers=top_markers,
topp_categories= c("GeneOntologyMolecularFunction",
"GeneOntologyBiologicalProcess"))
toppPlot(data, category = "GeneOntologyMolecularFunction", clusters = "X9")
toppPlot(data, category = "GeneOntologyMolecularFunction", clusters = "X8")
toppPlot(data, category = "GeneOntologyMolecularFunction", clusters = "X7")
toppPlot(data, category = "GeneOntologyMolecularFunction", clusters = c("X9", "X1"))
colnames(data)
opt = list(output_dir = "/Users/bryanwgranger/Desktop/stern",
seurat_object = "/Users/bryanwgranger/Desktop/stern/Stern_SCT_50pcs_05res_Reclust_NoDoublet.RData",
app_name = "Stern_data",
scconf_defaults = c('seurat_clusters'),
seurat_columns = "default",
config_file = "/Users/bryanwgranger/biocm/reference/shiny/shiny_config.json")
##############################
### LOAD/INSTALL LIBRARIES ###
##############################
cat("\nLoading/installing libraries ...\n")
suppressMessages(suppressWarnings({
library(Seurat)
library(ShinyCellPLUS)
library(rsconnect)
library(rjson)
library(dplyr)
}))
##########################
### LOAD SEURAT OBJECT ###
##########################
seurat <- readRDS(opt$seurat_object)
load(opt$seurat_object)
seurat <- seuObject_nodoub
setwd(opt$output_dir)
shiny_config <- fromJSON(file = opt$config_file)
View(seuObject_nodoub)
# filter the meta data
markers <- presto::wilcoxauc(seuObject_nodoub, 'seurat_clusters')
top_markers <- presto::top_markers(markers, n=20)
# create app config
scConf = createConfig(seurat)
#modify defaults
scConf <- modDefault(scConf, default1 = opt$scconf_defaults[1])
#modify defaults
scConf <- modDefault(scConf, default1 = opt$scconf_defaults[1], default2 = "Genotype")
makeShinyApp(seurat, scConf, shiny.title = opt$app_name)
# This might change based on your login
rsconnect::setAccountInfo(name=shiny_config$name,
token=shiny_config$token,
secret=shiny_config$secret)
options(repos = BiocManager::repositories())
rsconnect::deployApp("shinyApp/",
appName = opt$app_name,
account = shiny_config$name,
server = 'shinyapps.io')
install.packages("rsconnect")
install.packages('rsconnect')
suppressMessages(suppressWarnings({
library(Seurat)
library(ShinyCellPLUS)
library(rsconnect)
library(rjson)
library(dplyr)
}))
opt = list(output_dir = "/Users/bryanwgranger/Desktop/stern",
seurat_object = "/Users/bryanwgranger/Desktop/stern/Stern_SCT_50pcs_05res_Reclust_NoDoublet.RData",
app_name = "Stern_data",
scconf_defaults = c('seurat_clusters'),
seurat_columns = "default",
config_file = "/Users/bryanwgranger/biocm/reference/shiny/shiny_config.json")
# This might change based on your login
rsconnect::setAccountInfo(name=shiny_config$name,
token=shiny_config$token,
secret=shiny_config$secret)
options(repos = BiocManager::repositories())
rsconnect::deployApp("shinyApp/",
appName = opt$app_name,
account = shiny_config$name,
server = 'shinyapps.io')
options(repos = BiocManager::repositories())
getOption("repos")
library(ShinyCell)
devtools::install_github("SGDDNB/ShinyCell")
detach("package:ShinyCellPLUS", unload = TRUE)
suppressMessages(suppressWarnings({
library(Seurat)
library(ShinyCell)
library(rsconnect)
library(rjson)
library(dplyr)
}))
rsconnect::deployApp("shinyApp/",
appName = opt$app_name,
account = shiny_config$name,
server = 'shinyapps.io')
getOption("repos")
library(stringr)
new_repos = str_replace(BiocManager::repositories(), pattern = "3.15", replacement = "3.17")
new_repos
names(BiocManager::repositories())
names(new_repos) <- names(BiocManager::repositories())
options(repos = new_repos)
getOption("repos")
rsconnect::deployApp("shinyApp/",
appName = opt$app_name,
account = shiny_config$name,
server = 'shinyapps.io')
colnames(data)
load_all()
devtools::load_all()
setwd("~/biocm/packages/toppHat")
devtools::load_all()
devtools::load_all()
library(devtools)
load_all()
document()
document()
check()
use_mit_license()
rm(list = c("toppPlot"))
check()
load_all()
check()
use_package("dplyr")
use_package("ggplot2")
check()
check()
use_package('httr')
use_package('rjson')
check()
check()
use_package('forcats')
use_package('stringr')
check()
load_all()
check()
check()
check()
check()
colnames(top_markers)
sort(colnames(top_markers))
top <- top_markers
if ("10" %in% colnames(top)) {
rank_i <- which(colnames(top) == 'rank')
sorted_colnames <- c("rank", sort(as.numeric(colnames(top[,-c(rank_i)]))))
} else {
sorted_colnames <- colnames(top)
}
sorted_colnames
View(top)
top_df <- top[,sorted_colnames]
View(top_df)
p_val_adj = "BH"
#parse pvalue
p_val_col = switch(p_val_adj,
"BH" = "QValueFDRBH",
"Bonferroni" = "QValueBonferroni",
"BY" = "QvalueFDRBY",
"none" = "PValue")
p_val_adj = NULL
p_val_col = switch(p_val_adj,
"BH" = "QValueFDRBH",
"Bonferroni" = "QValueBonferroni",
"BY" = "QvalueFDRBY",
"none" = "PValue",
NULL = 'PValue')
p_val_adj = "None"
p_val_col = switch(p_val_adj,
"BH" = "QValueFDRBH",
"Bonferroni" = "QValueBonferroni",
"BY" = "QvalueFDRBY",
"none" = "PValue",
"None" = "PValue")
p_val_adj = "NoNe"
p_val_col = switch(p_val_adj,
"BH" = "QValueFDRBH",
"Bonferroni" = "QValueBonferroni",
"BY" = "QvalueFDRBY",
"none" = "PValue",
"None" = "PValue")
p_val_col = switch(p_val_adj,
"BH" = "QValueFDRBH",
"Bonferroni" = "QValueBonferroni",
"BY" = "QvalueFDRBY",
"none" = "PValue",
"None" = "PValue",
"PValue")
check()
roxygen2::roxygenise()
check()
roxygen2::roxygenise()
check()
roxygen2::roxygenise()
check()
roxygen2::roxygenise()
person("Bryan", "Granger", , "grangerb@musc.edu", role = c("aut", "cre"))
d <- toppFun(top_markers, topp_categories = c("GeneOntologyMolecularFunction",
"GeneOntologyBiologicalProcess"))
load_all()
d <- toppFun(top_markers, topp_categories = c("GeneOntologyMolecularFunction",
"GeneOntologyBiologicalProcess"))
one_cluster = c("25")
two_cluster = c("12",
"25")
str_c(two_cluster, sep = ", ")
str_c(two_cluster, sep = ", ", collapse = NULL)
str_c(two_cluster, collapse = ", ")
loadl_all()
load_all()
d <- toppFun(top_markers, topp_categories = c("GeneOntologyMolecularFunction",
"GeneOntologyBiologicalProcess"))
View(d)
append(c(), "25")
append(c("25"), "7")
load_all()
d <- toppFun(top_markers, topp_categories = c("GeneOntologyMolecularFunction",
"GeneOntologyBiologicalProcess"))
load_all()
d <- toppFun(top_markers, topp_categories = c("GeneOntologyMolecularFunction",
"GeneOntologyBiologicalProcess"))
write("error", stderr())
load_all()
d <- toppFun(top_markers, topp_categories = c("GeneOntologyMolecularFunction",
"GeneOntologyBiologicalProcess"))
roxygen2::roxygenise()
d <- toppFun(top_markers, topp_categories = c("GeneOntologyMolecularFunction",
"GeneOntologyBiologicalProcess"))
load_all()
d <- toppFun(top_markers, topp_categories = c("GeneOntologyMolecularFunction",
"GeneOntologyBiologicalProcess"),
max_results = 5)
View(d)
toppPlot(d, category = "GeneOntologyMolecularFunction", clusters = "2")
View(d)
load_all()
toppPlot(d, category = "GeneOntologyMolecularFunction", clusters = "2")
load_all()
library(devtools)
load_all()
#testing
top_markers <- read.csv('/Users/bryanwgranger/biocm/projects/ferreira/newest/main_analysis/top_markers_res07.csv')
d <- toppFun(top_markers, topp_categories = c("GeneOntologyMolecularFunction",
"GeneOntologyBiologicalProcess"),
max_results = 5)
View(top_markers)
toppPlot(d, category = "GeneOntologyMolecularFunction", clusters = "2")
load_all()
toppPlot(d, category = "GeneOntologyMolecularFunction", clusters = "2")
roxygen2::roxygenise()
load_all()
toppPlot(d, category = "GeneOntologyMolecularFunction", clusters = "2")
toppPlot(d, category = "GeneOntologyMolecularFunction", clusters = "X2")
toppPlot(d, category = "GeneOntologyMolecularFunction", clusters = "X3")
load_all()
toppPlot(d, category = "GeneOntologyMolecularFunction", clusters = "X3")
